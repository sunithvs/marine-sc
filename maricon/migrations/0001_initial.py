# Generated by Django 5.1.1 on 2025-01-17 17:09

import django.db.models.deletion
import maricon.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('size_on_website', models.IntegerField(choices=[(1, 'Small'), (2, 'Medium'), (3, 'Large')])),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['size_on_website'],
            },
        ),
        migrations.CreateModel(
            name='Faq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=100)),
                ('answer', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='gallery')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('day', models.CharField(choices=[('Day 1', 'Day 1'), ('Day 2', 'Day 2'), ('Day 3', 'Day 3')], max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Schedule',
                'ordering': ['date', 'time'],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('short_description', models.CharField(default='', max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='speakers')),
                ('facebook', models.URLField(blank=True, max_length=100, null=True)),
                ('twitter', models.URLField(blank=True, max_length=100, null=True)),
                ('google_scholar', models.URLField(blank=True, max_length=100, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='sponsors')),
                ('website', models.URLField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CommitteeMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='committee')),
                ('facebook', models.URLField(blank=True, max_length=100, null=True)),
                ('twitter', models.URLField(blank=True, max_length=100, null=True)),
                ('google_scholar', models.URLField(blank=True, max_length=100, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=100, null=True)),
                ('committee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maricon.committee')),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(default=maricon.models.generate_otp, max_length=6, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaperAbstract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('authors', models.CharField(max_length=500)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('keywords', models.CharField(max_length=500)),
                ('file', models.FileField(blank=True, null=True, upload_to='abstracts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('theme', models.CharField(choices=[(' Oceans and Climate change', ' Oceans and Climate change'), ('Coastal Processes and Estuarine Dynamics', 'Coastal Processes and Estuarine Dynamics'), (' Marine Bio-geochemical Dynamics.', ' Marine Bio-geochemical Dynamics.'), ('Marine Bio-prospecting – Natural Products and Drugs', 'Marine Bio-prospecting – Natural Products and Drugs'), ('Marine Pollution and Ecotoxicology', 'Marine Pollution and Ecotoxicology'), ('Coupled  Ocean Atmospheric Modeling', 'Coupled  Ocean Atmospheric Modeling'), (' Air - Sea Interactions', ' Air - Sea Interactions'), ('Remote Sensing Applications in Earth System Sciences', 'Remote Sensing Applications in Earth System Sciences'), ('Isotope Geochemistry', 'Isotope Geochemistry'), ('Environmental Geosciences and Geohazards', 'Environmental Geosciences and Geohazards'), ('Deep Continental Studies and Geodynamics', 'Deep Continental Studies and Geodynamics'), ('Quaternary Environment and Paleoclimate', 'Quaternary Environment and Paleoclimate'), ('Geo - Marine Resources and Exploration', 'Geo - Marine Resources and Exploration'), ('Submarine Groundwater Discharge and Mapping', 'Submarine Groundwater Discharge and Mapping'), ('Marine Biodiversity and Conservation', 'Marine Biodiversity and Conservation'), ('Marine Genomics', 'Marine Genomics'), ('Advancements in Aquaculture', 'Advancements in Aquaculture'), ('Aquatic Animal Health and Management Strategies', 'Aquatic Animal Health and Management Strategies'), ('Regional Climate Modeling', 'Regional Climate Modeling'), ('Ocean Observation Systems', 'Ocean Observation Systems'), ('Monsoon Prediction and Predictability', 'Monsoon Prediction and Predictability'), ('Aerosols and Air Quality', 'Aerosols and Air Quality'), ('Fisheries for Food Security and Sustainable Livelihoods', 'Fisheries for Food Security and Sustainable Livelihoods'), ('Marine Policies and Regulations', 'Marine Policies and Regulations'), ('Societal Applications of Marine-Geosciences', 'Societal Applications of Marine-Geosciences'), ('Polar Sciences', 'Polar Sciences')], default=' Oceans and Climate change', max_length=100)),
                ('presentation', models.CharField(choices=[('oral', 'oral'), ('poster', 'poster')], default='oral', max_length=100)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
